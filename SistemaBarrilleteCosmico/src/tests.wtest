import SistemaBarrileteCosmico.*


describe "Tests de SistemaBarrileteCosmico" {
	
	test "Localidades mas importantes" {
		var barrileteCosmico = generador.barrileteCosmico()
		var localidadesEsperadas = [generador.lastToninas(), generador.garlicSea()]
		
		var lista_obtenida = barrileteCosmico.localidadesMasImportantes()
		localidadesEsperadas.forEach{localidad =>
			assert.that(lista_obtenida.any{localidadObtenida => localidad.nombre() == localidadObtenida.nombre()})
		}
		
	}

	test "El descuento del 10% para Last Toninas es de 3150"{
		const barrileteCosmico = generador.barrileteCosmico()
		const porcentaje_descuento = 10
		const precio_esperado = 3150 //quizas deberia calcularlo a manopla en vez de hardcodearlo :thinking:
		const equipaje_esperado = "Certificado de descuento"
		
		barrileteCosmico.aplicarDescuento(porcentaje_descuento, "Last Toninas")
		var lastToninas = barrileteCosmico.getLocalidadPorNombre("Last Toninas")
		assert.equals(lastToninas.precio(), precio_esperado)
		assert.equals(lastToninas.getEquipaje(equipaje_esperado).size(), 1)
	}
	
	test"25% dto para Last Toninas queda en 2.625 y debe tener en el equipaje un certificado de descuento"{
		const barrileteCosmico = generador.barrileteCosmico()
		const porcentaje_descuento = 25
		const precio_esperado = 2625
		const equipaje_esperado = "Certificado de descuento"
		
		barrileteCosmico.aplicarDescuento(porcentaje_descuento, "Last Toninas")
		var lastToninas = barrileteCosmico.getLocalidadPorNombre("Last Toninas")
		assert.equals(lastToninas.precio(), precio_esperado)
		assert.notThat(lastToninas.getEquipaje(equipaje_esperado).isEmpty())
	}
	
	
	test"Silver's Sea no es una localidad peligrosa"{
		const silverSea = generador.silverSea()
		assert.notThat(silverSea.esLocalidadPeligrosa())
	}
	
	test"15% a todas las localidades, garlic=2125, silver=1147,5,last=2975,good=1275"{
		const barrileteCosmico = generador.barrileteCosmico()
		const equipaje_esperado = "Certificado de descuento"
		barrileteCosmico.aplicarDescuentoLocalidades(15)
		// Quizas estos const haya que delegarlos en un get precio por nombre o algo similar
		const precioGarlicSea = barrileteCosmico.getLocalidadPorNombre("Garlic's Sea").precio()
		const precioSilverSea = barrileteCosmico.getLocalidadPorNombre("Silver's Sea").precio()
		const precioLastToninas = barrileteCosmico.getLocalidadPorNombre("Last Toninas").precio()
		const precioGoodAirs = barrileteCosmico.getLocalidadPorNombre("Good Airs").precio()
		assert.equals(2125,precioGarlicSea)
		assert.equals(1147.5,precioSilverSea)
		assert.equals(2975,precioLastToninas)
		assert.equals(1275,precioGoodAirs)
		barrileteCosmico.localidades().forEach {localidad => 
			assert.notThat(localidad.getEquipaje(equipaje_esperado).isEmpty())
		}
	}
	
	test"La localidad mas peligrosa es Last Toninas"{
		const garlicSea = generador.garlicSea()
		const lastToninas = generador.lastToninas()
		const silverSea = generador.silverSea()
		const goodAirs = generador.goodAirs()
		
		assert.notThat(garlicSea.esLocalidadPeligrosa())
		assert.notThat(silverSea.esLocalidadPeligrosa())
		assert.notThat(goodAirs.esLocalidadPeligrosa())
		assert.that(lastToninas.esLocalidadPeligrosa())
	}
	
	test "Las empresa Barrilete Cosmico es una empresa extrema"{
		const barrileteCosmico = generador.barrileteCosmico()
		assert.that(barrileteCosmico.esEmpresaExtrema());		
	}
	
	test"La carta es Last Toninas, GarlicÂ´s sea, Good Airs y Silver's Sea"{
		const barrileteCosmico = generador.barrileteCosmico()
		var lista_obtenida = barrileteCosmico.mostrarCartaLocalidades()
		assert.that(lista_obtenida.any{localidad => localidad.contains("Silver's Sea")})
		assert.that(lista_obtenida.any{localidad => localidad.contains("Good Airs")})
		assert.that(lista_obtenida.any{localidad => localidad.contains("Garlic's Sea")})
		assert.that(lista_obtenida.any{localidad => localidad.contains("Last Toninas")})
	}
	
	
	test "Barrilete Cosmico puede generar un viaje a de Good Airs a Silver's Sea"{
		var barrileteCosmico = generador.barrileteCosmico()
		var goodAirs = barrileteCosmico.getLocalidadPorNombre("Good Airs")
		var silverSea = barrileteCosmico.getLocalidadPorNombre("Silver's Sea")
		
		var viaje = barrileteCosmico.prepararViaje(goodAirs, silverSea) 
		
		var transporte = barrileteCosmico.getMedioTransporte(viaje.medioTransporte()) //consigo el transporte utilizado
		var distancia = goodAirs.distanciaA(silverSea) // calculo la distancia
		var costoEsperado = (transporte.precioPorKm() * distancia) + silverSea.precio()
		
		assert.equals(costoEsperado, viaje.costo()) //valido que el costo se calcule correctamente
		assert.equals(distancia, viaje.distancia()) // valido que la distancia se calcule correctamente
	}
	
	test"Un usuario viaja desde Last Toninas a Garlic'Sea"{
		var localidadOrigen = generador.lastToninas()
		var localidadDestino = generador.garlicSea()
		var balance = 40000
		var unUsuario = generador.unUsuario(localidadOrigen, balance)
		
		//el usuario aun no realizo ningun viaje
		assert.that(unUsuario.getViajesRealizados().isEmpty())
		
		unUsuario.viajarA(localidadDestino)
		var nuevosViajes = unUsuario.getViajesRealizados()
		var viaje = nuevosViajes.head()
		var balanceEsperado = balance - viaje.costo()
				
		assert.equals(viaje.destino(), localidadDestino) //valido que sea el destino esperado
		assert.equals(viaje.origen(), localidadOrigen) // valido que sea el origen esperado
		assert.equals(unUsuario.balance(), balanceEsperado) // valido el balance
	}
	
	test "Un usuario no puede viajar desde Good Airs a Last Toninas porque no tiene plata"{
		var goodAirs = generador.goodAirs()
		var lastToninas = generador.lastToninas()
		var unUsuario = generador.unUsuario(goodAirs, 250)
		
		assert.throwsExceptionWithType(new NoPuedeViajarExcepcion(message = "No cuenta con el balance suficiente para viajar"), 
			{
				unUsuario.viajarA(lastToninas)
			})
	}
	
	test "Un usuario sigue a pHari"{
		//no es necesario que la localidad origen sea una instancia de Localidad para este caso de prueba
		var unUsuario = generador.unUsuario("Silver's Sea", 15000) 
		var pHari = generador.pHari()
		unUsuario.seguirUsuario(pHari)
		assert.that(unUsuario.siguiendo().any {seguidor => seguidor == pHari})
		assert.that(pHari.siguiendo().any {seguidor => seguidor == unUsuario})
	}
}

